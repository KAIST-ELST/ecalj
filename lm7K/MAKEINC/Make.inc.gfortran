FC = gfortran
LK = gfortran

FFLAGS_COMMON= -ffixed-line-length-132 $(CPP_SW) $(module)
FFLAGS = -O2  -fomit-frame-pointer -funroll-loops  -ffast-math  $(FFLAGS_COMMON)
FFLAGS_LESS = -O2 -fomit-frame-pointer  $(FFLAGS_COMMON)
FFLAGS_LESS2 = -O1 -fomit-frame-pointer  $(FFLAGS_COMMON)
FFLAGS_LESS3 = -O0 -fomit-frame-pointer  $(FFLAGS_COMMON)
FFLAGS_NONE = -O0   $(FFLAGS_COMMON)
FLAGS_LESS67 = -O0  $(FFLAGS_COMMON)

# safer option (debug)
#FFLAGS =      -g  -fbacktrace $(FFLAGS_COMMON)
#FFLAGS_LESS = -g  -fbacktrace $(FFLAGS_COMMON)
#FFLAGS_LESS2 = -g  -fbacktrace $(FFLAGS_COMMON)
#FFLAGS_LESS3 = -g  -fbacktrace $(FFLAGS_COMMON)
#FFLAGS_NONE = -g  -fbacktrace $(FFLAGS_COMMON)

##### MATH libraries FFTW,BLAS LAPACK ###
LIBMATH= /usr/lib/libfftw3.so.3 /usr/lib/liblapack.so.3gf /usr/lib/libblas.so.3gf 
LIBLOC= $(LIBMATH)



######################################################
# you don't need to touch following lines usually
######################################################

result_fc_version =$(shell tail -1 .fc_version )

make_fc_version:
	rm -f .fc_version
	-export LANG=C; ${FC} -v 2> .fc_version

### location of module #####
moddir = MODDIR/$(obj_path)
module = -J$(moddir) -I$(moddir)


### CPP switch 
CPP_SW = -DHASIARGC  -DHASGETARG  -DFDATE  -DHASCPUTIME  -DHASGETENVIRONMENTVARIABLE  -DNOQUAD  -DNOT_OVERLAP_VAR

###MPI  case add  -UMPE -UMPIK -DMPI 
##MPIK case k-point parallelizaion in MPI add -UMPE -DMPIK -UMPI 


##### Patch section #############################
### ... patch section for ./slatsm/slatsm.a
$(sla_obj_path)/huntx.o:slatsm/huntx.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
 
$(sla_obj_path)/hunti.o: slatsm/hunti.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
 
$(sla_obj_path)/polcof.o: slatsm/polcof.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
 
$(sla_obj_path)/rdfiln.o: slatsm/rdfiln.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
##### patch section for ./subs/subs.a
$(subs_obj_path)/ropbes.o: subs/ropbes.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
 
$(subs_obj_path)/ropyln.o: subs/ropyln.F
	$(FC) $(FFLAGS_LESS3) -c $< -o $@
 
$(subs_obj_path)/spcgrp.o  : subs/spcgrp.F $(moddir)/m_globalvariables.mod 
	$(FC) $(FFLAGS_LESS) -c $< -o $@

### these modules requies no optimization ---> safer.
#$(subs_obj_path)/m_toksw.o $(moddir)/m_toksw.mod $(moddir)/m_gtv.mod  : subs/m_toksw.F 
#$(subs_obj_path)/m_rdctrl.o $(moddir)/m_rdctrl.mod  : subs/m_rdctrl.F $(moddir)/m_gtv.mod $(moddir)/m_struc_def.mod $(moddir)/m_toksw.mod 
#$(subs_obj_path)/m_rdctrlchk.o $(moddir)/m_rdctrlchk.mod  : subs/m_rdctrlchk.F $(moddir)/m_gtv.mod $(moddir)/m_toksw.mod 
#$(subs_obj_path)/m_struc_def.o $(moddir)/m_struc_def.mod  : subs/m_struc_def.F 
#$(subs_obj_path)/m_struc_func.o $(moddir)/m_struc_func.mod  : subs/m_struc_func.F 
 
$(subs_obj_path)/m_toksw.o : subs/m_toksw.F 
	$(FC) $(FFLAGS_NONE) -c $< -o $(subs_obj_path)/m_toksw.o
$(subs_obj_path)/m_rdctrl.o  : subs/m_rdctrl.F
	$(FC) $(FFLAGS_NONE) -c $< -o $(subs_obj_path)/m_rdctrl.o 
$(subs_obj_path)/m_rdctrlchk.o : subs/m_rdctrlchk.F
	$(FC) $(FFLAGS_NONE) -c $< -o $(subs_obj_path)/m_rdctrlchk.o
$(subs_obj_path)/m_struc_def.o  : subs/m_struc_def.F 
	$(FC) $(FFLAGS_NONE) -c $< -o $(subs_obj_path)/m_struc_def.o
$(subs_obj_path)/m_struc_func.o : subs/m_struc_func.F 
	$(FC) $(FFLAGS_NONE) -c $< -o $(subs_obj_path)/m_struc_func.o
$(fp_obj_path)/rhogkl.o  : fp/rhogkl.F 
	$(FC) $(FFLAGS_LESS) -c $< -o $@

############# archiver
AR := ar
ARFLAGS := rv
RANLIB := ranlib

############# program and libraries (choose one of sections; normal, MPI, or MPIK)
programs = lmf lmfa lmfgw lmdos lmchk lmf2gw rdcmd #lm67
SUBS   := libsubs.a
FP     := libfp.a
SLATSM := slatsm.a

### MPI case #####
#programs = lmf-MPI lmfgw-MPI
#SUBS   = libsubs-MPI.a
#FP     = libfp-MPI.a
#SLATSM = slatsm-MPI.a

##### MPIK case ##
#programs = lmf-MPIK lmfgw-MPIK
#SUBS   = libsubs-MPIK.a 
#FP     = libfp-MPIK.a
#SLATSM = slatsm-MPI.a  #slatsm-MPI = slatsm-MPIK

### path to libraries (fixed) #########
LIBSUBS := subs/$(SUBS)
LIBFP   := fp/$(FP)
LIBSLA  := slatsm/$(SLATSM)


###############################
subs/$(SUBS):$(subs_obj)
	$(AR) $(ARFLAGS) $@ $(subs_obj)
fp/$(FP): $(fp_obj)
	$(AR) $(ARFLAGS) $@ $(fp_obj)
slatsm/$(SLATSM): $(sla_obj)
	$(AR) $(ARFLAGS) $@ $(sla_obj)

