#!/bin/tcsh
# --------------------------------
# test script for MaxLoc Wannier. Preparation stage is the same as gwsc
#---------------------------------
set nfpgw = ~/bin
set TARGET=srvo3
set MPI_SIZE=2 
set ITER=0
echo "### START gwsc: ITER= "$ITER, "MPI size= " $MPI_SIZE, "TARGET= "$TARGET

if(-e NoCore) then #backword compatibility not so meaningful now.
  rm -f NoCore 
endif

if(-e QPU) then
 rm -f QP[UD]
endif
if(! -e SEBK) then
 mkdir SEBK
endif

## mv sigm or simg.$TARGET to sigm. And make softlink to simg.$TARGET.
## sigm is prior to simg.$TARGET.
if(-e sigm) then
  if(-e sigm.$TARGET) mv sigm.$TARGET sigm.$TARGET.bakup 
  ln -s -f sigm sigm.$TARGET 
  echo '--- sigm is used. sigm.$TARGET is softlink to it  ---'
else
  if(-e sigm.$TARGET) then
    mv sigm.$TARGET sigm
    ln -s -f sigm sigm.$TARGET 
    echo '--- sigm.$TARGET is moved to sigm. sigm.$TARGET is softlink now.  ---'
  else
    echo '--- No sigm nor sigm.$TARGET files for starting ---'
  endif
endif 


##### itteration loop start #############################################
set ixx=0
@ ix = $ixx

### self-consistent calculation with given sigma ###
echo " ---- goto sc calculation with given sigma-vxc --- ix=",$ix
if($ix == 0 ) then
  if(-e sigm.$TARGET) then
    echo " we have sigm already, skip iter=0"
    continue
  endif   
  echo "No sigm ---> LDA caculation for eigenfunctions "
#  $nfpgw/lmf -vsig=0 $TARGET > llmf_lda
###make_ref.awk   mpirun -np $MPI_SIZE $nfpgw/lmf-MPIK $TARGET > llmf_lda
###ref2cmd.awk %CMD mpi=1 program=lmf-MPIK target=$TARGET output=llmf_lda 
#>>>

echo "        Start  mpirun -np $MPI_SIZE $nfpgw/lmf-MPIK  $TARGET > llmf_lda " 
rm -f llmf
mpirun -np $MPI_SIZE $nfpgw/lmf-MPIK  $TARGET > llmf_lda 
  if ( $? != 0 )  then
    echo Error in lmf-MPIK output=llmf_lda
    exit 10
  endif
#<<<
echo -n 'OK! --> Start'
  cp rst.$TARGET rst.$TARGET.lda
else
###make_ref.awk   mpirun -np $MPI_SIZE $nfpgw/lmf-MPIK $TARGET > llmf
###ref2cmd.awk %CMD mpi=1 program=lmf-MPIK target=$TARGET output=llmf 
#>>>

echo "        mpirun -np $MPI_SIZE $nfpgw/lmf-MPIK  $TARGET > llmf " 
mpirun -np $MPI_SIZE $nfpgw/lmf-MPIK  $TARGET > llmf 
  if ( $? != 0 )  then
    echo Error in lmf-MPIK output=llmf
    exit 10
  endif
#<<<
echo -n 'OK! --> Start'
endif

#if ( $? == 0 )  then
rm -f ewindow.${TARGET}* qbyl.${TARGET}* eigze*.${TARGET}*
#endif


######## preparatoy gw stage ################
###make_ref.awk echo 0 |$nfpgw/lmfgw  $TARGET > llmfgw00
###ref2cmd.awk %CMD program=lmfgw echoinput=0  target=$TARGET output=llmfgw00 
#>>>
set argin=0
echo $argin > _IN_
echo "  echo $argin| $nfpgw/lmfgw $TARGET > llmfgw00 " 
$nfpgw/lmfgw  $TARGET < _IN_ > llmfgw00 
  if ( $? != 0 )  then
    echo Error in lmfgw input=0 output=llmfgw00
    exit 10
  endif
#<<<
echo -n 'OK! --> Start'
###make_ref.awk echo 1 |$nfpgw/qg4gw           > lqg4gw
###ref2cmd.awk %CMD program=qg4gw echoinput=1  output=lqg4gw 
#>>>
set argin=1
echo $argin > _IN_
echo "  echo $argin|$nfpgw/qg4gw > lqg4gw " 
$nfpgw/qg4gw  < _IN_ > lqg4gw 
  if ( $? != 0 )  then
    echo Error in qg4gw input=1 output=lqg4gw
    exit 10
  endif
#<<<
echo -n 'OK! --> Start'

#echo 1 |$nfpgw/lmfgw $TARGET > llmfgw01
###make_ref.awk echo 1 |mpirun -np $MPI_SIZE $nfpgw/lmfgw-MPIK $TARGET > llmfgw01
###ref2cmd.awk %CMD mpi=1 program=lmfgw-MPIK echoinput=1  target=$TARGET output=llmfgw01 
#>>>
set argin=1
echo $argin > _IN_
echo "  echo $argin|mpirun -np $MPI_SIZE $nfpgw/lmfgw-MPIK  $TARGET> llmfgw01 " 
mpirun -np $MPI_SIZE $nfpgw/lmfgw-MPIK  $TARGET < _IN_ > llmfgw01 
  if ( $? != 0 )  then
    echo Error in lmfgw-MPIK input=1 output=llmfgw01
    exit 10
  endif
#<<<
echo -n 'OK! --> Start'
#set exinfo = $?
#if($exinfo == 0 ) then
#  echo " OK! lmfgw mode=1 "
#else
#  echo Error in echo 1\|lmfgw $TARGET
#  echo `tail -3 llmfgw01 `
#  exit
#endif


#echo $TARGET|$nfpgw/lmf2gw    > llmf2gw
echo "  $nfpgw/lmf2gw >llmf2gw"
$nfpgw/lmf2gw    > llmf2gw
  if ( $? != 0 )  then
    echo Error in rdata4gw_v2 input=0 output=lrdata4gw_v2
    exit 10
  endif
#<<<
echo -n 'OK! --> Start'


############## main gw stage fpgw/exec ################
###make_ref.awk echo 0|$nfpgw/rdata4gw_v2      >lrdata4gw_v2
###ref2cmd.awk %CMD program=rdata4gw_v2 echoinput=0 output=lrdata4gw_v2 
#>>>
set argin=0
echo $argin > _IN_
echo "  echo $argin|$nfpgw/rdata4gw_v2  > lrdata4gw_v2 " 
$nfpgw/rdata4gw_v2  < _IN_ > lrdata4gw_v2 
  if ( $? != 0 )  then
    echo Error in rdata4gw_v2 input=0 output=lrdata4gw_v2
    exit 10
  endif
#<<<
echo -n 'OK! --> Start'

if($ix == 0) then
  cp evec.$TARGET evec0  # this is used in hqpe_sc for isigma_en==5
endif

if(-e ANFcond) cp EVU EVD  ########### This is for ANFcond. Unused recently


# -- get EFERMI for hx0fp0
###make_ref.awk echo 1|$nfpgw/heftet      >leftet
###ref2cmd.awk %CMD program=heftet echoinput=1 output=leftet 
#>>>
set argin=1
echo $argin > _IN_
echo "  echo $argin| $nfpgw/heftet > leftet " 
$nfpgw/heftet  < _IN_ > leftet 
  if ( $? != 0 )  then
    echo Error in heftet input=1 output=leftet
    exit 10
  endif
#<<<
echo -n 'OK! --> Start'


# -- hchknw only calculate NW, which contains the number of nw corresponding to QPNT -----
###make_ref.awk echo 1|$nfpgw/hchknw         >lchknw
###ref2cmd.awk %CMD program=hchknw echoinput=1 output=lchknw 
#>>>
set argin=1
echo $argin > _IN_
echo "  echo $argin| $nfpgw/hchknw > lchknw " 
$nfpgw/hchknw  < _IN_ > lchknw 
  if ( $? != 0 )  then
    echo Error in hchknw input=1 output=lchknw
    exit 10
  endif
#<<<
echo -n 'OK! --> Start'

### Core1 exchange self-energy 
# -- product basis for core
###make_ref.awk echo 3|$nfpgw/hbasfp0 >lbasC
###ref2cmd.awk %CMD program=hbasfp0 echoinput=3 output=lbasC 
#>>>
set argin=3
echo $argin > _IN_
echo "  echo $argin| $nfpgw/hbasfp0 > lbasC " 
$nfpgw/hbasfp0  < _IN_ > lbasC 
  if ( $? != 0 )  then
    echo Error in hbasfp0 input=3 output=lbasC
    exit 10
  endif
#<<<
echo -n 'OK! --> Start'


### Valence part of the self-energy
###make_ref.awk echo 0|$nfpgw/hbasfp0  >lbas
###ref2cmd.awk %CMD program=hbasfp0 echoinput=0 output=lbas 
#>>>
set argin=0
echo $argin > _IN_
echo "  echo $argin|$nfpgw/hbasfp0  > lbas " 
$nfpgw/hbasfp0  < _IN_ > lbas 
  if ( $? != 0 )  then
    echo Error in hbasfp0 input=0 output=lbas
    exit 10
  endif
#<<<
echo -n 'OK! --> Start'


### maxloc ##########################################
echo 1|$nfpgw/hmaxloc   >lmaxloc1
$nfpgw/hpsig            >lpsig
echo 2|$nfpgw/huumat    >luumat2
echo 2|$nfpgw/hmaxloc   >lmaxloc2
$nfpgw/wanplot >lwanplot
