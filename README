=== ecalj package === (this document is checked at 10Aug2013)

>git clone https://github.com/tkotani/ecalj.git
to get a ecalj package here. (you need "git" installed).
==================================================================
ecalj is a first-principle electronic structure calculation package in
f90, especially for the PMT-QSGW. 
This is at https://github.com/tkotani/ecalj
We have another home page at http://pmt.sakura.ne.jp/wiki/, but
not well-organized yet, little in English yet.  We will renew it.
===================================================================

##### Unique points in ecalj package #####
(1)All electron full-potential PMT method: a mixed basis method of two
   kinds of augmented waves, that is, L(APW+MTO). 
   In principle, it is possible to perform default calculation just
   from atomic structures.
   Relaxiation of atomic positions is possible in GGA/LDA and LDA+U.
   A converter between POSCAR(VASP) and ctrls is included in
   ~/ecalj/StructureTool/. (it is slight buggy; let T.Kotani know problems in it.).

(2)GW method, especially, the PMT-QSGW method:
   the Quasiparticle self-consistent GW method (QSGW) based on the PMT method. 
   In addion, we can calculate dielectric functions, spin fluctions,
   spectrum function of the Green's functions and so on.
   GW-related codes are in ecalj/fpgw/.
   For paralellized calculations, 
   we can use lmf-MPIK and mpi version of hvccfp0,hx0fp0_sc,hsfp0_sc.
   (although we have room to improve it).

##### Install and test #####
At first, 
 (0) Get ecalj package and get tools.
To get a ecalj package, do
>git clone https://github.com/tkotani/ecalj.git
Then we do three make procedures:
 (1) make for single-core LDA part, 
 (2) make for MPIK LDA part, 
 (3) make for MPIK GW part.
In the following explanation, we assume gfortran in ubuntu. 
But we can also use ifort, and others. Follow instructions below.
 (4) Install test

------------
(0) Get ecalj package and get tools.
---Let us assume you use ubuntu. ---
You need following tools and libraries to be installed.
>sudo apt-get install git  gitk # version control and to get source from github
>sudo apt-get install gitk #git gui 'gitk --all' is useful. do it at ecal/.
>sudo apt-get install gfortran      # GFORTRAN
>sudo apt-get install openmpi-bin openmpi-dev     # MPI 
>sudo apt-get install libfftw3-3     or something else # FFTW
>sudo apt-get install libblas3gf     or something else # BLAS
>sudo apt-get install liblapack3gf   or something else  # LAPACK
>sudo apt-get install etags csh bash tcsh   # shells

python 2.x is also assumed (usually already in ubuntu).

Version ctrl by git (which makes things easier, but not
necessarily required for installation).


After you have installed git (version control software), you can get ecalj package by
>git clone https://github.com/tkotani/ecalj.git # Get source code for ecalj.
or get it in *.zip from the page https://github.com/tkotani/ecalj
(push zip button). I recommend you to use git, 
to check your changes (>git diff), and know version id.
After the above git clone command, a directory ecalj/ appears
(under the directory at which you did git clone).

We suppose you have ecalj/ and bin/ at your home directory, 
but it can be at any directory. All are described with relative path.
(except ~/bin, which is a directory containing all required binaries and scripts.
 You can also specify other directory instead of ~/bin in makefiles.).

We can check history of ecalj code development by
">gik --all" at ecalj directory after you did git clone.

------------
(1) make single core LDA part (it is in ecalj/lm7K/)
Move to ecalj/lm7K/, then do "make PLATFORM=gfortran". Then make process start.
The main makefile is lm7K/Makefile, and it includes
lm7K/MAKEINC/Make.inc.gfortran. In advance, set LIBLOC in
Make.inc.gfortran when you use different math libraries.
For other cases such as ifort, run "make PLATFORM=foobar" where foobar can be ifort
or something else. foobar corresponds to an include file 
lm7K/MAKEINC/Make.inc.foobar. For ifort, there are several MAKEINC/Make.inc.ifort*
(not _mpik*) with which we installed to machines. 
You can choose one of them or you can set your own Make.inc.ifort.*
(compilar, compilar options, math library).
I recommend "make PLATFORM=ifort.simple" for ifort. But you may need
to add -heap-arrays 1 (for large calculations. Because we use large stacksize).

Warning messages like ": warning: ignoring old commands for target `/vxcnls.o'" is
just because of problem of Makefile. you can neglect this. We will fix it..

Current ecalj with gfortran4.6 or 4.7 works fine with FFLAGS=-O2,
but failed with FFLAGS=-O3.

Parallel make like
>make -j4 PLATFORM=gfortran
may speed it up for multicore machines(four core in this case). 
But it stops because of dependency is not well-described in current Makefile. 
In such case, repeat it a few times, or repeat it without -j4.

Then do "make PLATFORM=gfortran install"
This just copy required files to your ~/bin.

------------
(2) make MPI LDA part.
lmf-MPIK is now needed for gwsc. To make it, do
"make PLATFORM=gfortran_mpik". lmfgw-MPIK is also generated.
For ifort, set PLATFORM=ifort_mpik.simple
Then ecalj/lm7K/MAKEINC/Make.inc.ifort_mpik.simple is used.
You may need to add -heap-arrays 1 (for large calculations. Because we
use large stacksize) to ecalj/lm7K/MAKEINC/Make.inc.ifort_mpik.simple

Clean up:
If something wrong. do "make clean" or "make cleanall" and start over.
Look into Makefile if you like to know what they do.
"make cleanall" removes all *.o *.a modules, and binaries.

---
* Move binaries to your bin by 
>make install
at ecalj/lm7K. It just moves all requied binaries to your ~/bin.
In advance, you have to make your bin, and add ~/bin to  your path
(e.g. export PATH=$HOME/bin:$PATH in .bashrc. then login again or source .bashrc)

(3) Installation for fpgw/
At ecalj/fpgw/exec/ directory, you have to edit make.inc.
Especially note option, -heap-arrays for ifort
(to avoid Segmentation fault due to stacksize limit (ulimit -a), it is
required. Or you can set ulimit -s unimited).
 
Then you have to run 
>make
>make install
>make install2
Before this, you have to set blas and lapack in fpge/exec/make.inc.
(for ifort, -mkl is enough. LIBMATH= should be the same as that in Make.inc.*.
"make install" copy requied files to your ~/bin.

----
(4) Install test
We have to check whether binaries works fine or not.
Move to ecalj/TestInstall. Then type make (with no arguments). 
It shows help about how to do test.
To test all of binaries, just do
>make all
. All tests will require ~10min.  (nio_gwsc takes ~300sec)
In cases, nio_gwsc fails. 
However, as long as the difference is small,
not need to care its fail sign. (a minor bug in test).

As the help of make (no arguments), shows
>make lmall
tests only LDA part.
>make gwall
tests only GW part.


#######  Usage minimum. (e.g, PMT-QSGW(gwsc) for si) ###################
-------------------------------------------
(1) Write structure file ctrls.si by hand 
    (you can have ctrls from POSCAR(VASP) with vasp2ctrl in ecalj/StructureTool/.)
(2) conver ctrls.si to ctrl.si by ctrlgen2.py si --eh1 --nk=6 --tratio=1.0 
   (do -help). Then you have default ctrl.si (rename ctrlgen2.ctr.si to ctrl.si). 
   Modify it if reqiured. We don't need empty sphere now. 
   pwemax specify number of APW. It is recommended to know
   meanings of parameters in the generated ctrlgen2.ctr.si. 
   You may need to modify ctrl.si, especially initial condition for magnetic cases.
   For examle, you set MMOM=0,0,1.5,0 for Niup, and MMOM=0,0,-1.5 for
   Nidn for nspin=2 (antiferromagnetic case). 
   (initial condition of magnetic moment distribution. unit is the
   difference of number of electrons n_up-n_down).
(3) Run "lmfa si" to prepare atom.
(4) For PMT-QSGW, make GWinput.tmp by mkGWIN_v2 si 
    (just put BZ division n1n2n3). Edit GWinput.tmp and rename it as GWinput.
(5) Then run a script gwsc, e.g. "gwsc 5 si -np 5" (5+1 iteration with
    6 nodes).
(6) To continue calculation do gwsc 5 si -np 5 again.
    (you have to have ctrl.si rst.si QGpsi ESEAVR sigm.si)
    (Then 0th iteration is skipped---thus e have just five iteration).

(7) For band plot and tdos plot, please look into samples in
    job_band and job_tdos in ecalj/CMD22sample/*. 
    For qsub, you have to edit test.sh for your machine.
-------------------------------------------

####### How to make version up? ######
ecalj is really a research tool. We do not have enough
human resource to keep it very well. So be careful for version up.

>cd ecalj
>git diff > gitdiff_backup   
   This is to save your changes (diff to git_diff_backup )for safe.
   I recommend you do take git diff >foobar as backup.
>./mbackup          
    This save makefiles and related files. Look into the ./mbackup file. It is a simple scripts.
    Your customized Makefile MAKEINC/* fpgw/exec/make* are copied to ecalj/MKbackup/. 
    CAUTION: this overwirte old ones.
>git checkout -f             
     CAUTION!!!: this delete your changes in ecalj/.
     Move files controlled by git to the original which is downloaded.
>git pull                    
    This overwirte makefile and so on. 
>./mrestore                  
    Look into this script before you use this.
    This copy make.inc* and MAKEINC/* back to original directory.

I think it is recommended to use >gitk --all and read this document 
README to check what is added recently. Difference can be easily taken,
e.g. by >git diff d2281:README 81d27:README (here d2281 and 81d27 are
top several digits of version id). 
>git show 81d27:README is also useful.

After ./mrestore, following instruction of the above installation.
Probably, you don't need to make cleanall (this delete all binaries).


###### Document #####
GetStarted:
ecalj/Document/GetStarted/ecalj_getstarted.tex 

Details:
ecalj/Document/ecaljnote/ecaljnote*.pdf
(some japanese character included).


######## MEMO: ----not read this ---- #########
branch x0mpi_merge (6b5e3, Aug2013): 
contains a try to paralellize x0kf
(imaginary part of dielectric function) more. It just show a
strategy, not efficient yet.

branch stop2rx (97b5393, Aug2013):
contains a newer version which replace all stop with "call rx (or
rx0)" which are stops with error code.
New scripts generated by "fpgw/exec/rewritecommand/*.awk"
catch these error codes. 
We will move to stop2rx as master branch.

--------- end of file -----------------
